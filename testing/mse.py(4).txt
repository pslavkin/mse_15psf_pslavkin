import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

fs=20
N=50

fig=plt.figure(1)
circleAxe=fig.add_subplot(2,2,1)
circleLn,promLn=plt.plot([],[],'r-',[],[],'bo')
circleAxe.grid(True)
circleAxe.set_xlim(-1,1)
circleAxe.set_ylim(-1,1)
circleLn.set_label(0)
circleLg=circleAxe.legend()
circleData=[]
promData=[]

signalAxe=fig.add_subplot(2,2,2)
signalLn,=plt.plot([],[],'b-')
signalAxe.grid(True)
signalAxe.set_xlim(0,N/fs)
signalAxe.set_ylim(-1,1)
signalData=[]
signalFrec=1.3
tData=[]

def signal(f,n,c):
  return c*np.sin(2*np.pi*f*n/fs)

def circle(f,n,c):
  return c*np.exp(-2j*np.pi*f*n*1/fs)

def update(n):
  global circleData,tData,signalData,promData
  circleData.append(circle(1,n,1)*signal(signalFrec,n,1))
  promData.append(np.average(circleData))
  promLn.set_data(np.real(promData[-1]),np.imag(promData[-1]))
  circleLn.set_data(np.real(circleData),np.imag(circleData)) 
  tData.append(n/fs)  
  signalData.append(signal(signalFrec,n,1))
  signalLn.set_data(tData,signalData)
  circleLn.set_label(n)
  circleLg=circleAxe.legend()
  if n==N-1:
    circleData=[]
    promData=[]
    signalData=[]
    tData=[]
  return circleLn,signalLn,circleLg,promLn
  
  
ani=FuncAnimation(fig,update,N,init_func=None,interval=100,blit=True,repeat=True)
plt.show()
  
